generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String? 
  points         Int         @default(0)
  onboardingResponses OnboardingResponse?

  learningProgress   UserLearningProgress[]
  interviews         Interview[]

  sentConnections    Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  context   String?
}

model OnboardingResponse {
  id        String   @id @default(uuid()) 
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  ageGroup  AgeGroup?
  experience Experience?
  purpose    Purpose?
  compleated Boolean   @default(false)
  createdAt DateTime @default(now())
}

model CareerPath {
  id            String         @id @default(uuid())
  name          String
  description   String?
  img           String?

  learningNodes LearningNode[]
  subscriptions UserLearningProgress[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model LearningNode {
  id           String         @id @default(uuid())
  title        String
  order        Int
  type         LearningNodeType
  rewardPoints Int            @default(0)

  careerPathId String?
  careerPath   CareerPath?    @relation(fields: [careerPathId], references: [id])
}

model UserLearningProgress {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  careerPathId String       
  careerPath   CareerPath   @relation(fields: [careerPathId], references: [id])
  
  score        Int          @default(0)
  startedAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  currentNodeID  String       @default("")
  userLearningNodes UserLearningNode[]
}

model UserLearningNode {
  id                       String              @id @default(uuid())
  userLearningProgressId   String
  userLearningProgress     UserLearningProgress @relation(fields: [userLearningProgressId], references: [id])
  
  order                    Int
  title                    String
  completed                Boolean             @default(false)
  updatedAt                DateTime            @updatedAt
  type         LearningNodeType
  rewardPoints Int            @default(0)
}

model Otp {
  id        String @id @default(cuid())
  email     String
  otp       String

  expiresAt DateTime
}

model Interview {
  id         String          @id @default(uuid())
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  type       InterviewType
  status     InterviewStatus @default(PENDING)
  feedback   String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  qas        InterviewQA[]
}

model InterviewQA {
  id          String    @id @default(uuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id])
  question    String
  answer      String
  createdAt   DateTime  @default(now())
}

model Connection {
  id           String            @id @default(uuid())
  requesterId  String
  requester    User              @relation("SentConnections", fields: [requesterId], references: [id])
  receiverId   String
  receiver     User              @relation("ReceivedConnections", fields: [receiverId], references: [id])
  status       ConnectionStatus  @default(PENDING)
  createdAt    DateTime          @default(now())
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InterviewType {
  COMPANY_BASED
  CODING
  APTITUDE
}

enum InterviewStatus {
  PENDING
  COMPLETED
  REVIEWED
}

enum LearningNodeType {
  MODULE  
  TEST    
}

enum AgeGroup {
  UNDER_18
  AGE_18_TO_25
  AGE_25_TO_30
  OVER_30
}

enum Experience {
  UNDER_1YR
  BETWEEN_1_TO_2YR
  BETWEEN_3_TO_5YR
  OVER_5YR
}

enum Purpose {
  LEARNING 
  NETWORKING
  INTERVIEW
}